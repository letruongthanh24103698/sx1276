/*
 * SCI_SX1276.h
 *
 *  Created on: May 15, 2020
 *      Author: Le Truong Thanh
 *      Comment: DO NOT EDIT THIS FILE
 *      First version for RAK4200
 */
#ifndef SRC_SCI_SX1276_H_
#define SRC_SCI_SX1276_H_

#include "main.h"
#include <stdbool.h>
#include "HCI_SX1276.h"
#include "sx1276Regs-LoRa.h"
#include "sx1276Regs-Fsk.h"
/*****************************************************************************************************************/
/*													MACROS DEFINITION											 */
/*****************************************************************************************************************/
#define RADIO_INIT_REGISTERS_VALUE                \
{                                                 \
    { MODEM_FSK , REG_LNA                , 0x23 },\
    { MODEM_FSK , REG_RXCONFIG           , 0x1E },\
    { MODEM_FSK , REG_RSSICONFIG         , 0xD2 },\
    { MODEM_FSK , REG_AFCFEI             , 0x01 },\
    { MODEM_FSK , REG_PREAMBLEDETECT     , 0xAA },\
    { MODEM_FSK , REG_OSC                , 0x07 },\
    { MODEM_FSK , REG_SYNCCONFIG         , 0x12 },\
    { MODEM_FSK , REG_SYNCVALUE1         , 0xC1 },\
    { MODEM_FSK , REG_SYNCVALUE2         , 0x94 },\
    { MODEM_FSK , REG_SYNCVALUE3         , 0xC1 },\
    { MODEM_FSK , REG_PACKETCONFIG1      , 0xD8 },\
    { MODEM_FSK , REG_FIFOTHRESH         , 0x8F },\
    { MODEM_FSK , REG_IMAGECAL           , 0x02 },\
    { MODEM_FSK , REG_DIOMAPPING1        , 0x00 },\
    { MODEM_FSK , REG_DIOMAPPING2        , 0x30 },\
    { MODEM_LORA, REG_LR_PAYLOADMAXLENGTH, 0x40 },\
}

#define RADIO_INIT_REGISTERS_VALUE                \
{                                                 \
    { MODEM_FSK , REG_LNA                , 0x23 },\
    { MODEM_FSK , REG_RXCONFIG           , 0x1E },\
    { MODEM_FSK , REG_RSSICONFIG         , 0xD2 },\
    { MODEM_FSK , REG_AFCFEI             , 0x01 },\
    { MODEM_FSK , REG_PREAMBLEDETECT     , 0xAA },\
    { MODEM_FSK , REG_OSC                , 0x07 },\
    { MODEM_FSK , REG_SYNCCONFIG         , 0x12 },\
    { MODEM_FSK , REG_SYNCVALUE1         , 0xC1 },\
    { MODEM_FSK , REG_SYNCVALUE2         , 0x94 },\
    { MODEM_FSK , REG_SYNCVALUE3         , 0xC1 },\
    { MODEM_FSK , REG_PACKETCONFIG1      , 0xD8 },\
    { MODEM_FSK , REG_FIFOTHRESH         , 0x8F },\
    { MODEM_FSK , REG_IMAGECAL           , 0x02 },\
    { MODEM_FSK , REG_DIOMAPPING1        , 0x00 },\
    { MODEM_FSK , REG_DIOMAPPING2        , 0x30 },\
    { MODEM_LORA, REG_LR_PAYLOADMAXLENGTH, 0x40 },\
}

#define XTAL_FREQ                                   32000000
#define FREQ_STEP                                   61.03515625

#define RX_BUFFER_SIZE                              256

/*!
 * Sync word for Private LoRa networks
 */
#define LORA_MAC_PRIVATE_SYNCWORD                   0x12

/*!
 * Sync word for Public LoRa networks
 */
#define LORA_MAC_PUBLIC_SYNCWORD                    0x34

#define RF_MID_BAND_THRESH                          525000000

#define RSSI_OFFSET_LF                              -164
#define RSSI_OFFSET_HF                              -157

/*****************************************************************************************************************/
/*													   DATA-STRUCTS												 */
/*****************************************************************************************************************/
typedef enum
{
    MODEM_FSK = 0,
    MODEM_LORA,
}RadioModems_t;

typedef struct
{
    RadioModems_t Modem;
    uint8_t       Addr;
    uint8_t       Value;
}RadioRegisters_t;

typedef enum
{
	SX1276_NORMAL_RUNNING=0,
	SX1276_TX_RUNNING,
	SX1276_RX_RUNNING
}SX1276_State_e;

typedef struct
{
    int8_t SnrValue;
    int16_t RssiValue;
    uint8_t Size;
}RadioLoRaPacketHandler_t;

typedef union uLoRaMacHeader
{
    /*!
     * Byte-access to the bits
     */
    uint8_t Value;
    /*!
     * Structure containing single access to header bits
     */
    struct sHdrBits
    {
        /*!
         * Major version
         */
        uint8_t Major           : 2;
        /*!
         * RFU
         */
        uint8_t RFU             : 3;
        /*!
         * Message type
         */
        uint8_t MType           : 3;
    }Bits;
}LoRaMacHeader_t;

typedef union uLoRaMacFrameCtrl
{
    /*!
     * Byte-access to the bits
     */
    uint8_t Value;
    /*!
     * Structure containing single access to bits
     */
    struct sCtrlBits
    {
        /*!
         * Frame options length
         */
        uint8_t FOptsLen        : 4;
        /*!
         * Frame pending bit
         */
        uint8_t FPending        : 1;
        /*!
         * Message acknowledge bit
         */
        uint8_t Ack             : 1;
        /*!
         * ADR acknowledgment request bit
         */
        uint8_t AdrAckReq       : 1;
        /*!
         * ADR control in frame header
         */
        uint8_t Adr             : 1;
    }Bits;
}LoRaMacFrameCtrl_t;

typedef enum eLoRaMacFrameType
{
    /*!
     * LoRaMAC join request frame
     */
    FRAME_TYPE_JOIN_REQ              = 0x00,
    /*!
     * LoRaMAC join accept frame
     */
    FRAME_TYPE_JOIN_ACCEPT           = 0x01,
    /*!
     * LoRaMAC unconfirmed up-link frame
     */
    FRAME_TYPE_DATA_UNCONFIRMED_UP   = 0x02,
    /*!
     * LoRaMAC unconfirmed down-link frame
     */
    FRAME_TYPE_DATA_UNCONFIRMED_DOWN = 0x03,
    /*!
     * LoRaMAC confirmed up-link frame
     */
    FRAME_TYPE_DATA_CONFIRMED_UP     = 0x04,
    /*!
     * LoRaMAC confirmed down-link frame
     */
    FRAME_TYPE_DATA_CONFIRMED_DOWN   = 0x05,
    /*!
     * LoRaMAC RFU frame
     */
    FRAME_TYPE_RFU                   = 0x06,
    /*!
     * LoRaMAC proprietary frame
     */
    FRAME_TYPE_PROPRIETARY           = 0x07,
}LoRaMacFrameType_e;
/*****************************************************************************************************************/
/*											    Software Command Interface     									 */
/*****************************************************************************************************************/
typedef struct{
	void (*OnTxDone)(void);

	void (*OnTxTimeout)(void);

	void (*OnRxDone)(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr);

	void (*OnRxWindow1Timeout)(void);

	void (*OnRxWindow2Timeout)(void);

	void (*DIO0_IRQ)(void);

	void (*DIO1_IRQ)(void);

	void (*DIO2_IRQ)(void);

	void (*DIO3_IRQ)(void);
}SX1276_UserFunction_t;

typedef struct{
	RadioModems_t Modem;

	uint8_t length;

	uint8_t buffer[100];

	uint32_t channel;

	SX1276_State_e State;

	RadioLoRaPacketHandler_t PacketHandler;

	const void (*Reset)(void);

	const void (*RxChainCalibration)(void);

	const void (*SetOpMode)(uint8_t OpMode);

	const void (*SetModem)(RadioModems_t modem);

	const void (*SetPublicNetwork)(bool enable);

	const uint8_t (*Read)(uint8_t adr);

	const void (*ReadBuffer)(uint8_t adr,uint8_t *buffer,uint8_t length);

	const void (*Write)(uint8_t adr, uint8_t data);

	const void (*WriteBuffer)(uint8_t adr, uint8_t *buffer, uint8_t length);

	const uint8_t (*InOut)(uint8_t outData);

	const void (*Init)(void);

	const void (*Sleep)(void);

	const void (*Send)();

	const void (*Prepareframe)();

	const void (*SetChannel)();

	const void (*SetMaxPayloadLength)(RadioModems_t Modem, uint8_t length);

	const void (*SetTxConfig)( RadioModems_t modem, int8_t power, uint32_t fdev,
            uint32_t bandwidth, uint32_t datarate,
            uint8_t coderate, uint16_t preambleLen,
            bool fixLen, bool crcOn, bool freqHopOn,
            uint8_t hopPeriod, bool iqInverted, uint32_t timeout );

	const void (*SetStby)(void);

	const void (*DIO0_IRQ)(void);

	const void (*DIO1_IRQ)(void);

	const void (*DIO2_IRQ)(void);

	const void (*DIO3_IRQ)(void);

	SX1276_UserFunction_t UserFunction;

	const void (*print);

}SCI_SX1276_t;

typedef struct{
	const HCI_SX1276_t *HCI;

	const SCI_SX1276_t *SCI;
}SX1276_t;

extern SX1276_t SX1276;
#endif
